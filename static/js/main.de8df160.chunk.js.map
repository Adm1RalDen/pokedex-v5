{"version":3,"sources":["Components/header.jsx","Components/pokemonInfo.jsx","Components/pokemonList.jsx","Components/pagination.jsx","Components/search.jsx","App.js","Store.js","index.js"],"names":["Title","Typography","typePokemon","Header","inject","observer","props","useState","visible","setVisible","chosenType","setChosenType","to","level","type","onClick","icon","title","placement","closable","onClose","Group","options","onChange","value","console","log","length","Store","setPokemons","getTypesPokemon","then","res","setFilterPokemons","splice","sizeGrid","setCountsPokemon","message","error","getPokemonList","PokemonInfo","pokemonName","match","params","namePokemon","useEffect","setPokemonInfo","getPokemonInfo","pokemonInfo","style","fontSize","Grid","hoverable","cover","alt","src","idImage","loader","size","unloader","Meta","map","item","key","base_stat","stat","url","name","percent","showInfo","PokemonList","className","pokemons","index","width","Paginations","current","selectedPages","defaultCurrent","showSizeChanger","pageSizeOptions","total","countPokemons","propsValue","filterPokemons","slice","tempRangeValue","setRangeValue","setSelectedPage","onShowSizeChange","setSizeGrid","Search","Input","Searchs","placeholder","onSearch","e","arr","Object","entries","filter","indexOf","toLowerCase","reduce","prev","App","Content","exact","path","component","Footer","Pagination","axios","require","rangeValue","setRangeInterval","limit","offset","this","makeRequest","response","results","count","get","data","temp","i","pokemon","temps","prev2","item2","stats","types","weight","decorate","observable","action","setIdImage","store","response2","previous","response3","stores","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de8df160.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport {Link} from 'react-router-dom'\r\nimport { Layout, Drawer, Button, Checkbox, message, Typography } from 'antd'\r\nimport '../Styles/header.css';\r\n\r\nconst { Title } = Typography;\r\nconst typePokemon = ['bug', 'dark', 'dragon', 'electric', 'fairy', 'fighting',\r\n    'fire', 'flying', 'ghost', 'grass', 'ground', 'ice', 'normal', 'poison',\r\n    'psychic', 'rock', 'steel', 'water'];\r\n\r\nconst Header = inject('Store')(observer((props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [chosenType, setChosenType] = useState([])\r\n    const showDrawer = () => {\r\n        setVisible(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setVisible(false);\r\n\r\n    };\r\n    const handleChange = (value) => {\r\n        console.log(value)\r\n        setChosenType(value)\r\n        // console.log(value.map(item => item));\r\n    }\r\n    const handleSetFilter = () => {\r\n        if (!chosenType.length) {\r\n            message.error('count chosen types is zero')\r\n        } else {\r\n            props.Store.setPokemons([]);\r\n            // console.log(props.Store.filterPokemons)\r\n            props.Store.getTypesPokemon(chosenType).then(res => {\r\n                props.Store.setFilterPokemons(res);\r\n                props.Store.setPokemons(res.splice(0, props.Store.sizeGrid));\r\n                props.Store.setCountsPokemon(res.length)\r\n\r\n            });\r\n            setVisible(false)\r\n        }\r\n    }\r\n    const clear = () => {\r\n        setVisible(false)\r\n        setChosenType([])\r\n        props.Store.setFilterPokemons([]);\r\n        props.Store.getPokemonList([10, 0]);\r\n    }\r\n    return (\r\n        <Layout.Header>\r\n            <Link to = '/' ><Title level={3}>Pokedex</Title></Link>\r\n            <Button type=\"primary\" onClick={showDrawer} icon='menu' />\r\n            <Drawer\r\n                title=\"Menus\"\r\n                placement=\"right\"\r\n                closable={false}\r\n                onClose={onClose}\r\n                visible={visible}\r\n            >\r\n                <Checkbox.Group options={typePokemon} onChange={handleChange} value={chosenType} />\r\n                {/* <Select mode=\"tags\" style={{ width: '100%' }} placeholder=\"choose type of pokemon\" onChange={handleChange}>\r\n                    {typePokemon.map(item => <Option key={item} >{item}</Option>)}\r\n                </Select> */}\r\n                <Button type=\"primary\" onClick={handleSetFilter}>\r\n                    filter\r\n                </Button>\r\n                <Button type=\"primary\" onClick={clear}>\r\n                    clear\r\n                </Button>\r\n            </Drawer>\r\n        </Layout.Header>\r\n    )\r\n}));\r\nexport default Header","import React, { useEffect } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Spin, Card, Avatar, Progress, Icon } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport Img from 'react-image'\r\nimport '../Styles/pokemonInfo.css';\r\n\r\nconst PokemonInfo = inject('Store')(observer((props) => {\r\n    const pokemonName = props.match.params.namePokemon;\r\n    useEffect(() => {\r\n        props.Store.setPokemonInfo([]);\r\n        props.Store.getPokemonInfo(pokemonName).then(res => props.Store.setPokemonInfo(res))\r\n    }, [])\r\n    // console.log(props.match.params.namePokemon)\r\n    return (\r\n        <div >\r\n            {(props.Store.pokemonInfo.length !== 0) ?\r\n                <div >\r\n                    <Link to='/' ><Icon type=\"arrow-left\" style={{ fontSize: '3em' }} /></Link>\r\n\r\n                    <Card.Grid\r\n                        hoverable>\r\n                        <Card\r\n                            hoverable\r\n                            cover={<Img alt='' src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.Store.idImage[pokemonName] + 1}.png`}\r\n                                loader={<Spin size=\"large\" />}\r\n                                unloader={<Avatar size={128} icon=\"close\" />}\r\n                            />\r\n                            }\r\n                        >\r\n                            <Card.Meta title={pokemonName} />\r\n                        </Card>\r\n                        <Card\r\n                            hoverable\r\n                        >\r\n                            {props.Store.pokemonInfo[0].map(item => {\r\n                                return <div key={item.base_stat + item.stat.url} >\r\n                                    <div >{item.stat.name}</div>\r\n                                    <Progress percent={item.base_stat} showInfo={false} />\r\n                                </div>\r\n                            })}\r\n                        </Card>\r\n                    </Card.Grid></div>\r\n                :\r\n                <Spin size='large' />\r\n            }\r\n        </div>\r\n    )\r\n}));\r\nexport default PokemonInfo","import React from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Card, Spin, Avatar } from 'antd'\r\nimport '../Styles/pokemonList.css';\r\nimport Img from 'react-image'\r\nimport { Link } from 'react-router-dom'\r\nconst PokemonList = inject('Store')(observer((props) => {\r\n    const Store = props.Store;\r\n    const handleClickPokemon = (name) => {\r\n\r\n    }\r\n    return (\r\n        <div className='pokemonItem'>\r\n            {(Store.pokemons.length !== 0 && Store.idImage !== null) ?\r\n                Store.pokemons.map((item, index) => {\r\n                    return <Link to = {`/PokemonInfo/${item.name}`} key = {item.name}><Card\r\n                        hoverable\r\n                        style={{ width: 200 }}\r\n                        cover={<Img alt='' src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${+Store.idImage[item.name] + 1}.png`}\r\n                            loader={<Spin size=\"large\" />}\r\n                            unloader={<Avatar size={128} icon=\"close\" />}\r\n                        />\r\n                        }\r\n                    >\r\n                        <Card.Meta title={item.name} />\r\n                    </Card></Link>\r\n                })\r\n                : <Spin size='large' />\r\n            }\r\n        </div >\r\n\r\n    )\r\n}));\r\nexport default PokemonList","import React from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Pagination } from 'antd'\r\nimport '../Styles/pagination.css';\r\n\r\nconst Paginations = inject('Store')(observer((props) => {\r\n    const handleChangePage = (propsValue) => {\r\n        props.Store.setPokemons([]);\r\n        const { sizeGrid } = props.Store;\r\n        if (!props.Store.filterPokemons.length) {\r\n            console.log('pagination1', sizeGrid, propsValue * sizeGrid - sizeGrid);\r\n            const tempRangeValue = [sizeGrid, propsValue * sizeGrid - sizeGrid];\r\n            props.Store.setRangeValue(tempRangeValue);\r\n            props.Store.getPokemonList(tempRangeValue);\r\n        } else {\r\n            props.Store.setPokemons(props.Store.filterPokemons.slice((propsValue-1) * sizeGrid, (propsValue - 1) * sizeGrid + sizeGrid));\r\n        }\r\n        props.Store.setSelectedPage(propsValue);\r\n\r\n    }\r\n    const handelSizeChange = (value, propsValue) => {\r\n        \r\n        props.Store.setPokemons([]);\r\n        if (!props.Store.filterPokemons.length) {\r\n            const tempRangeValue = [propsValue, 0];\r\n            props.Store.setRangeValue(tempRangeValue);\r\n            props.Store.getPokemonList(tempRangeValue);\r\n        }else{\r\n            props.Store.setPokemons(props.Store.filterPokemons.slice(0, propsValue));\r\n        }\r\n        props.Store.setSelectedPage(1);\r\n        props.Store.setSizeGrid(propsValue);\r\n    }\r\n    return (\r\n        <div className='paginationAlign'>\r\n            <Pagination\r\n                current={props.Store.selectedPages}\r\n                defaultCurrent={1}\r\n                showSizeChanger\r\n                pageSizeOptions={['10', '20', '50']}\r\n                total={props.Store.countPokemons}\r\n                onChange={handleChangePage}\r\n                onShowSizeChange={handelSizeChange}\r\n            />\r\n        </div>\r\n    );\r\n}))\r\n\r\nexport default Paginations","import React, { useState } from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Input, message } from 'antd';\r\n\r\nconst { Search } = Input;\r\n\r\nconst Searchs = inject('Store')(observer((props) => {\r\n    const handleeaSrch = (e) => {\r\n        let arr = Object.entries(props.Store.idImage);\r\n        arr = arr.filter(item => {\r\n            return (item[0].indexOf(e.toLowerCase()) !== -1) ? true : false\r\n        }).reduce((prev, item, index) => {\r\n            prev = [...prev, { name: item[0] }]\r\n            return prev\r\n        }, []);\r\n        if (arr.length !== 0) {\r\n            props.Store.setPokemons([]);\r\n            props.Store.setFilterPokemons(arr);\r\n            props.Store.setPokemons(arr.splice(0, props.Store.sizeGrid));\r\n            props.Store.setCountsPokemon(arr.length)\r\n        }else{\r\n            message.error('not found')\r\n        }\r\n    }\r\n    return (\r\n        <Search\r\n            placeholder=\"input search text\"\r\n            onSearch={handleeaSrch}\r\n            style={{ width: '80%' }}\r\n        />\r\n    )\r\n}))\r\n\r\nexport default Searchs","import React from 'react'\r\nimport { inject, observer } from 'mobx-react'\r\nimport { Layout } from 'antd'\r\nimport { Route } from 'react-router-dom'\r\n\r\nimport 'antd/dist/antd.css'\r\nimport Header from './Components/header'\r\nimport PokemonInfo from './Components/pokemonInfo'\r\nimport PokemonList from './Components/pokemonList'\r\nimport Pagination from './Components/pagination'\r\nimport Search from './Components/search'\r\nimport './Styles/app.css'\r\n\r\nconst App = inject('Store')(observer((props) => {\r\n    // props.Store.\r\n    return (\r\n        <Layout>\r\n            <Header />\r\n            <Layout.Content>\r\n                <Route exact path='/' component={Search} />\r\n                <Route exact path='/' component={PokemonList} />\r\n                <Route exact path='/PokemonInfo/:namePokemon' component={PokemonInfo} />\r\n            </Layout.Content>\r\n            <Layout.Footer>\r\n                <Route exact path='/' component={Pagination} />\r\n            </Layout.Footer>\r\n        </Layout>\r\n    );\r\n}))\r\n\r\nexport default App","import { observable, action, decorate } from 'mobx';\r\nconst axios = require('axios');\r\n\r\nclass Store {\r\n    pokemons = [];\r\n    rangeValue = [10, 0];//limit == count, offset == startGet\r\n    countPokemons = 1;\r\n    pokemonInfo = [];\r\n    selectedPages = 1;\r\n    sizeGrid = 10;\r\n    idImage = null;\r\n    filterPokemons = [];\r\n    setPokemons = (props) => {\r\n        this.pokemons = props;\r\n    }\r\n    setRangeInterval = (props) => {\r\n        this.rangeValue = props;\r\n    }\r\n    async getPokemonList(props) {\r\n        console.log('tuta ya');\r\n        let [limit, offset] = props;\r\n        const url = `https://pokeapi.co:443/api/v2/pokemon/?limit=${limit}&offset=${offset}`;\r\n        return this.makeRequest(url).then(response => {\r\n            this.pokemons = response.results;\r\n            this.countPokemons = response.count\r\n            return response.count;\r\n        })\r\n    }\r\n    async makeRequest(props) {\r\n        try {\r\n            const response = await axios.get(props)\r\n            return response.data;\r\n        } catch (eror) {\r\n            console.log(eror);\r\n        }\r\n\r\n    }\r\n    setSelectedPage(props) {\r\n        this.selectedPages = props;\r\n    }\r\n    setPokemonInfo(props) {\r\n        this.pokemonInfo = props;\r\n    }\r\n    async getTypesPokemon(props) {\r\n        let temp = [];\r\n        for (let i = 0; i < props.length; i++) {\r\n            let url = `https://pokeapi.co/api/v2/type/${props[i]}`;\r\n            await this.makeRequest(url).then(response => {\r\n                temp = [...temp, response.pokemon]\r\n            })\r\n        }\r\n        temp = temp.reduce((prev, item) => {\r\n            let temps = item.reduce((prev2, item2) => {\r\n                prev2 = [...prev2, item2.pokemon]\r\n                return prev2;\r\n            }, [])\r\n            prev = [...prev, ...temps]\r\n            return prev\r\n        }, [])\r\n        console.log(temp.length);\r\n        this.setCountsPokemon(temp.length);\r\n        return temp;\r\n        // this.filterPokemons = temp;\r\n        // this.filterPokemons = [...this.filterPokemons, res]\r\n    }\r\n    setSizeGrid(props) {\r\n        this.sizeGrid = props;\r\n    }\r\n    setRangeValue(props) {\r\n        this.rangeValue = props;\r\n    }\r\n    setIdImage(props) {\r\n        this.idImage = props;\r\n    }\r\n    setFilterPokemons(props){\r\n        this.filterPokemons = props;\r\n    }\r\n    async getPokemonInfo(props){\r\n        const url = `https://pokeapi.co/api/v2/pokemon/${props}`;\r\n        let response = await this.makeRequest(url);\r\n        response = [response.stats, response.types, response.weight]\r\n        // .then(response => {\r\n        //     let temp = [response.stats, response.types, response.weight];\r\n        //     return temp\r\n        // })\r\n        return response;\r\n    }\r\n    setCountsPokemon(props){\r\n        this.countPokemons = props;\r\n    }\r\n\r\n}\r\ndecorate(Store, {\r\n    pokemons: observable,\r\n    rangeValue: observable,\r\n    pokemonInfo: observable,\r\n    selectedPages: observable,\r\n    sizeGrid: observable,\r\n    countPokemons: observable,\r\n    idImage: observable,\r\n    filterPokemons: observable,\r\n\r\n    setPokemons: action,\r\n    setRangeInterval: action,\r\n    setPokemonInfo: action,\r\n    setSelectedPage: action,\r\n    setSizeGrid: action,\r\n    setIdImage: action,\r\n    setFilterPokemons: action,\r\n    setCountsPokemon: action,\r\n});\r\nconst store = new Store();\r\n\r\nstore.getPokemonList(store.rangeValue)\r\n    .then(response => {\r\n        store.makeRequest(`https://pokeapi.co:443/api/v2/pokemon/?limit=${response}`)\r\n            .then(response2 => response2.results.reduce((previous, current, index) => {\r\n                previous[current.name] = index;\r\n                return previous\r\n            }, {})).then(response3 => { console.log('ku'); store.setIdImage(response3) })\r\n    });\r\n\r\nexport default store;\r\nexport { Store };","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'mobx-react'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport App from './App'\r\nimport Store from './Store';\r\nconst stores = { Store }\r\nReactDOM.render(\r\n    <Provider {...stores}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}